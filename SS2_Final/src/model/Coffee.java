package model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.util.Tuple;
import model.report.CoffeesByTypeReport;

public class Coffee {
	public static final String C_id = "id";
	public static final String C_name = "nameCoffee";
	public static final String C_type = "typeOfCoffee";
	public static final String C_rptCoffeeByType = "rptCoffeeByType";
	@DAttr(name=C_rptCoffeeByType,type=Type.Domain, serialisable=false, 
		      // IMPORTANT: set virtual=true to exclude this attribute from the object state
		      // (avoiding the view having to load this attribute's value from data source)
		      virtual=true)
		  private CoffeesByTypeReport rptCoffeeByType;
	private static int idCounter = 0;

	@DAttr(name = C_id, id = true, auto = true, type = Type.String, length = 6, mutable = false, optional = false)
	private String id;

	@DAttr(name = C_name, type = Type.String, length = 15, optional = false)
	private String nameCoffee;

	@DAttr(name = C_type, type = Type.Domain, optional = false, length = 6)
	@DAssoc(ascName = "coffee-has-typeOfCoffee", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "coffee", associate = @Associate(cardMax = 25, cardMin = 1, type =TypeOfCoffee.class))
	private TypeOfCoffee typeOfCoffee;

	

	@DOpt(type = DOpt.Type.DataSourceConstructor)
	public Coffee(String id, String nameCoffee, TypeOfCoffee typeOfCoffee) {
		this.id = nextID(id);
		this.nameCoffee = nameCoffee;
		this.typeOfCoffee = typeOfCoffee;
		
	}

	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	public Coffee(@AttrRef("nameCoffee") String nameCoffee, @AttrRef("typeOfCoffee") TypeOfCoffee typeOfCoffee) {
		this(null, nameCoffee, typeOfCoffee);
	}

	public String getId() {
		return id;
	}

	public String getNameCoffee() {
		return nameCoffee;
	}

	public void setNameCoffee(String nameCoffee) {
		this.nameCoffee = nameCoffee;
	}

	public TypeOfCoffee getTypeOfCoffee() {
		return typeOfCoffee;
	}

	public void setTypeOfCoffee(TypeOfCoffee typeOfCoffee) {
		this.typeOfCoffee = typeOfCoffee;
	}

	public CoffeesByTypeReport getRptCoffeeByType() {
		return rptCoffeeByType;
	}
	
	@Override
	public String toString() {
		return "Coffee (" + id + "," + nameCoffee + " , " + typeOfCoffee + ")";
	}

	// automatically generate the next student id
	private String nextID(String id) throws ConstraintViolationException {
		if (id == null) { // generate a new id
			idCounter++;
			return "C" + idCounter;
		} else {
			// update id
			int num;
			try {
				num = Integer.parseInt(id.substring(1));
			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { id });
			}

			if (num > idCounter) {
				idCounter = num;
			}

			return id;
		}
	}

	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			// TODO: update this for the correct attribute if there are more than one auto
			// attributes of this class

			String maxId = (String) maxVal;

			try {
				int maxIdNum = Integer.parseInt(maxId.substring(1));

				if (maxIdNum > idCounter) // extra check
					idCounter = maxIdNum;

			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { maxId });
			}
		}
	}
}
