package model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.util.Tuple;
import domainapp.basics.util.cache.StateHistory;

public class DetailExOrder  {
	private static int idCounter = 0;
	private static final String AttributeName_TotalPrice = "totalPrice";
	@DAttr(name = "id", id = true, auto = true, type = Type.String, length = 6, mutable = false, optional = false)
	private String id;
	
	@DAttr(name = "coffee", type = Type.Domain, length = 6, optional = false)
	private Coffee coffee;
	

	@DAttr(name = "quantity", type = Type.Integer, length = 6, optional = false)
	private Integer quantity;

	@DAttr(name = "exPrice", type = Type.Double, length = 6, optional = false)
	private Double exPrice;

	@DAttr(name = AttributeName_TotalPrice, type = Type.Double, auto = true, mutable = false, optional = true, serialisable = false, derivedFrom = {
			"quantity", "exPrice" })
	private Double totalPrice;
	
	@DAttr(name = "saleOrder", type = Type.Domain, length = 5, optional = false)
	  @DAssoc(ascName = "saleOrder-has-detailExOrders", role = "detailExOrder", 
	    ascType = AssocType.One2Many, endType = AssocEndType.Many, 
	    associate = @Associate(type = SaleOrder.class, cardMin = 1, cardMax = 1), dependsOn = true)
	  private SaleOrder saleOrder;
	
	private StateHistory<String, Object> stateHist;

	@DOpt(type = DOpt.Type.DataSourceConstructor)
	public DetailExOrder(String id,@AttrRef("coffee") Coffee coffee, @AttrRef("quantity") Integer quantity,
			@AttrRef("exPrice") Double exPrice,@AttrRef("saleOrder") SaleOrder saleOrder ) {
		this.id = nextID(id);
		this.coffee = coffee;
		this.quantity = quantity;
		this.exPrice = exPrice;
		stateHist = new StateHistory<>();
		calTotal();
		this.saleOrder = saleOrder;
	}
	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	@DOpt(type = DOpt.Type.RequiredConstructor)
	public DetailExOrder(@AttrRef("coffee") Coffee coffee, @AttrRef("quantity") int quantity,
			@AttrRef("exPrice") double exPrice,@AttrRef("saleOrder") SaleOrder saleOrder) {
		this(null, coffee, quantity, exPrice,saleOrder);
	}

	public void calTotal() {
		totalPrice = exPrice * quantity;
	}
	
	public String getId() {
		return id;
	}

	public Coffee getCoffee() {
		return coffee;
	}

	public void setCoffee(Coffee coffee) {
		this.coffee = coffee;
		
	}

	public int getQuantity() {
		return quantity;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
		calTotal();
	}

	public double getExPrice() {
		return exPrice;
	}

	public void setExPrice(double exPrice) {
		this.exPrice = exPrice;
		calTotal();
	}

	public double getTotalPrice() {
		return getTotalPrice(false);
	}
	
	public double getTotalPrice(boolean cached) throws IllegalStateException {
	    if (cached) {
	        Object val = stateHist.get(AttributeName_TotalPrice);

	        if (val == null)
	          throw new IllegalStateException(
	              "DetailExOrder.getTotalPrice: cached value is null");

	        return (Double) val;
	      } else {
	        if (totalPrice != null)
	          return totalPrice;
	        else
	          return 0;
	      }
	}
	
	public void setSaleOrder(SaleOrder saleOrder) {
		this.saleOrder = saleOrder;
	}
	public SaleOrder getSaleOrder() {
		return saleOrder;
	}
	public String toString() {
		return "DetailExOrder : { Quantity: " + quantity + ", ExportPrice: " + exPrice + ", totalPrice: " + totalPrice + "}";
	}
	
	public String nextID(String id) throws ConstraintViolationException {
		if (id == null) { // generate a new id
			idCounter++;

			return "DEO" + idCounter;
		} else {
			// update id
			int num;
			try {
				num = Integer.parseInt(id.substring(3));
			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { id });
			}

			if (num > idCounter) {
				idCounter = num;
			}

			return id;
		}
	}

	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			// TODO: update this for the correct attribute if there are more than one auto
			// attributes of this class

			String maxId = (String) maxVal;

			try {
				int maxIdNum = Integer.parseInt(maxId.substring(3));

				if (maxIdNum > idCounter) // extra check
					idCounter = maxIdNum;

			} catch (RuntimeException e) {
				throw new ConstraintViolationException(ConstraintViolationException.Code.INVALID_VALUE, e,
						new Object[] { maxId });
			}
		}
	}
	

}
