package model;

import domainapp.basics.exceptions.ConstraintViolationException;
import domainapp.basics.model.meta.AttrRef;
import domainapp.basics.model.meta.DAssoc;
import domainapp.basics.model.meta.DAttr;
import domainapp.basics.model.meta.DAttr.Type;
import domainapp.basics.model.meta.DOpt;
import domainapp.basics.model.meta.DAssoc.AssocEndType;
import domainapp.basics.model.meta.DAssoc.AssocType;
import domainapp.basics.model.meta.DAssoc.Associate;
import domainapp.basics.util.Tuple;

public class Address {
	@DAttr(name = "id", id = true, auto = true, length = 3, mutable = false, optional = false, type = Type.Integer)
	private int id;
	private static int idCounter;

	@DAttr(name = "street", type = Type.Domain, optional = false, length = 6)
	@DAssoc(ascName = "address-has-street", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "address", associate = @Associate(cardMax = 25, cardMin = 1, type =Street.class))
	private Street street;
	
	@DAttr(name = "district", type = Type.Domain, optional = false, length = 6)
	@DAssoc(ascName = "address-has-district", ascType = AssocType.One2Many, endType = AssocEndType.Many, role = "address", associate = @Associate(cardMax = 25, cardMin = 1, type =District.class))
	private District district;
	
	@DAttr(name = "cityName", type = Type.String, length = 20, optional = false)
	private String cityName;

	// from object form: Student is not included
	@DOpt(type = DOpt.Type.ObjectFormConstructor)
	@DOpt(type = DOpt.Type.RequiredConstructor)
	public Address(@AttrRef("street") Street street,@AttrRef("district") District district,@AttrRef("cityName") String cityName) {
		this(null, street, district, cityName);
	}
	

	// based constructor (used by others)
	@DOpt(type = DOpt.Type.DataSourceConstructor)

	public Address(Integer id, Street street,District district,String cityName) {
		this.id = nextId(id);
		this.street = street;
		this.district = district;
		this.cityName = cityName;
	}

	private static int nextId(Integer currID) {
		if (currID == null) {
			idCounter++;
			return idCounter;
		} else {
			int num = currID.intValue();
			if (num > idCounter)
				idCounter = num;

			return currID;
		}
	}

	/**
	 * @requires minVal != null /\ maxVal != null
	 * @effects update the auto-generated value of attribute <tt>attrib</tt>,
	 *          specified for <tt>derivingValue</tt>, using <tt>minVal, maxVal</tt>
	 */
	@DOpt(type = DOpt.Type.AutoAttributeValueSynchroniser)
	public static void updateAutoGeneratedValue(DAttr attrib, Tuple derivingValue, Object minVal, Object maxVal)
			throws ConstraintViolationException {

		if (minVal != null && maxVal != null) {
			// TODO: update this for the correct attribute if there are more than one auto
			// attributes of this class
			int maxIdVal = (Integer) maxVal;
			if (maxIdVal > idCounter)
				idCounter = maxIdVal;
		}
	}

	public int getId() {
		return id;
	}


	public Street getStreet() {
		return street;
	}

	public void setStreet(Street street) {
		this.street = street;
	}

	public District getDistrict() {
		return district;
	}

	public void setDistrict(District district) {
		this.district = district;
	}
	public String getCityName() {
		return cityName;
	}
	
	public void setCityName(String cityName) {
		this.cityName = cityName;
	}

	@Override
	public String toString() {
		return cityName;
	}
}
